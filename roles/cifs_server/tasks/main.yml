---
- name: Install CIFS kernel driver (OmniOS only)
  package: name=system/file-system/smb state=present
  when: ansible_distribution == "OmniOS"

- name: Install CIFS service (OmniOS only)
  package: name=service/file-system/smb state=present
  when: ansible_distribution == "OmniOS"

- name: Enable SMB server service
  service: name="smb/server" state=started

- name: Enable SMB client service
  service: name="smb/client" state=started

- name: Enable bind service
  service: name="bind" state=started

- name: Enable idmap service
  service: name="idmap" state=started

- name: Enable SMB support in PAM
  shell: 'grep pam_smb_passwd.so.1 /etc/pam.conf || { echo "other\tpassword required\tpam_smb_passwd.so.1\tnowarn" >> /etc/pam.conf && echo "Changed"; }'
  register: pam_output
  changed_when: '"Changed" in pam_output.stdout'

# Create groups
- name: Creating Groups
  group:
    name: "{{ item.name }}"
    state: present
#    gid: "{{ item.gid }}"
  with_items: "{{ host_groups_present }}"
  when: host_groups_present is defined

# Remove groups
- name: Removing Groups
  group:
    name: "{{ item.name }}"
    state: absent
  with_items: "{{ host_groups_absent }}"
  when: host_groups_absent is defined

# Create users
- name: Creating Local Users
  user:
    name: "{{ item.name }}"
    uid: "{{ item.uid }}"
    groups: "{{ item.groups }}"
    password: "{{ item.password }}"
    state: present
  with_items: "{{ host_users_present }}"
  when: host_users_present is defined

# Create ZFS filesystems
- name: Creating ZFS filesystems.
  zfs:
    name: "{{ item.name }}"
    state: present
    quota: "{{ item.quota }}"
    mountpoint: "{{ item.mountpoint }}"
  with_items: "{{ zfs_filesystems_present }}"
  when: zfs_filesystems_present is defined
  
- name: Set Directory Properties
  file:
    path: "{{ item.mountpoint }}"
    state: directory
    mode: 0777
  with_items: "{{ zfs_filesystems_present }}"
  when: zfs_filesystems_present is defined

# Create SMB Shares
- name: Creating SMB shares.
  shell: 'sharemgr show | grep "{{ item.path }}" || { sharemgr add-share -r "{{ item.name }}" -s "{{ item.path }}" smb && echo "Share Added"; }'
  register: sharemgr_output
  changed_when: '"Share Added" in sharemgr_output.stdout'
  with_items: "{{ smb_shares_present }}"
  when: smb_shares_present is defined
