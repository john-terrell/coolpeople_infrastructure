---
##########################
# Global variables are defined in group_vars/all.yml
##########################
- hosts: nodes
  tasks:
    # SmartOS
    - block:
        - name: Ensure pgkin cache updated (SmartOS)
          pkgin: update_cache=yes
        - name: Ensure pv installed (SmartOS)
          pkgin: name=pv state=present
        - name: Ensure mbuffer installed (SmartOS)
          pkgin: name=mbuffer state=present
        - name: Ensure zones scrubbing is enabled in cron. (SmartOS)
          cron:
            name: "Scrub zones pool twice a month"
            minute: "0"
            hour: "3"
            day: "1,15"
            job: "/usr/sbin/zpool scrub zones"
      when: ansible_distribution == "SmartOS"

    # OmniOS
    - block:
        - name: Ensure NTP service is enabled and started.
          service: name=ntp enabled=yes state=started
        - name: Ensure rpool scrubbing is enabled in cron. (OmniOS)
          cron:
            name: "Scrub rpool pool twice a month"
            minute: "0"
            hour: "3"
            day: "1,15"
            job: "/usr/sbin/zpool scrub rpool"
      when: ansible_distribution == "OmniOS"
    
  #
  # Host specific: storage00
  #
- hosts: storage00.internal.coolpeople.us
  roles:
    - cifs_server
  tasks:
    # Make sure and scrub the tank pool
    - name: Ensure tank scrubbing is enabled in cron.
      cron:
        name: "Scrub tank pool twice a month"
        minute: "0"
        hour: "4"
        day: "1,15"
        job: "/usr/sbin/zpool scrub tank"

    # Create groups
    - name: Adding groups
      group:
        name: "{{ item.name }}"
        state: present
      with_items: "{{ host_groups_present }}"
    
    # Remove groups
    - name: Removing groups
      group:
        name: "{{ item.name }}"
        state: absent
      with_items: "{{ host_groups_absent }}"

    # Create users
#    - user:
#        name: "{{ item.name }}"
#        state: present
#      with_items: "{{ host_users_present }}"

  #
  # Host specific: node01
  #
- hosts: node01.internal.coolpeople.us
  tasks:
    # Zone Image Installation
    - name: Ensure Base-64 17.3 image exists
      imgadm: uuid=23b267fc-ad02-11e7-94da-53e3d3884fe0 state=present
    - name: Ensure Ubuntu 16.04 image exists
      imgadm: uuid=7b5981c4-1889-11e7-b4c5-3f3bdfc9b88b state=present
    - name: Ensure Unbuntu 16.04 KVM image exists
      imgadm: uuid=342045ce-6af1-4adf-9ef1-e5bfaf9de28c state=present

    # Zone Creation
    - name: Create SambaDC Zone
      vmadm:
        state: present
        brand: kvm
        kernel_version: 4.2
        alias: sambadc
        ram: 2048
        vcpus: 1
        disks:
          - model: virtio
            boot: true
            image_uuid: 342045ce-6af1-4adf-9ef1-e5bfaf9de28c
        nics:
          - nic_tag: external
            model: virtio
            ip: "{{ hostvars['sambadc.zone']['ansible_host'] }}"
            netmask: 255.255.0.0
            gateway: 10.0.0.1
            primary: true
        resolvers:
          - 10.0.0.1
          - 8.8.8.8
          - 8.8.4.4
        quota: 30
        customer_metadata:
          root_authorized_keys: "ssh-rsa AAAAB3NzaC1yc2EAAAADAQABAAABAQDYIHv3DoXnAMn+dggUup1a+jjSqpZiIU5ThgljXHG9KM+iy1W3zo9qshUE7vBj/l7l5aHzRKyXsmWb6EdmtlVBnYl7SH5IMGaEFlB6n7T+yoMRl7VczZZxvP+VSAac2HeLPvdrCDeJCckfkHeTg9E3rt2PcAz0REKDCm34lpsedgM4QrVh8D54NgqLCdpT+QpidEBwE1T5wGMId4OwBB+r1VJZyn+lstJreQ0mu67qn3TFKu5AxZoTdDj6BSDqqHEos5KirS4pz3zt3r5IbC3mv8vDm9+o6O5M2f7R6RRNfD9IPJANmO0k2Ajf529I0bGgAGgIpIXb8OaI6G+L48dR john@Johns-MacBook-Pro.local"
          user-script : "/usr/sbin/mdata-get root_authorized_keys > ~root/.ssh/authorized_keys"

    - name: Create NAS Zone
      vmadm:
        state: present
        alias: nas
        uuid: "{{ hostvars['nas.zone']['zone_uuid'] }}"
        image_uuid: 23b267fc-ad02-11e7-94da-53e3d3884fe0
        max_physical_memory: 2048
        cpu_cap: 100
        delegate_dataset: true
#        indestructible_delegated: true
#        limit_priv: "default,sys_smb"
        nics:
          - nic_tag: external
            ip: "{{ hostvars['nas.zone']['ansible_host'] }}"
            netmask: 255.255.0.0
            gateway: 10.0.0.1
            primary: true
        resolvers:
          - 10.0.0.1
          - 8.8.8.8
          - 8.8.4.4
        quota: 80
        customer_metadata:
          root_authorized_keys: "ssh-rsa AAAAB3NzaC1yc2EAAAADAQABAAABAQDYIHv3DoXnAMn+dggUup1a+jjSqpZiIU5ThgljXHG9KM+iy1W3zo9qshUE7vBj/l7l5aHzRKyXsmWb6EdmtlVBnYl7SH5IMGaEFlB6n7T+yoMRl7VczZZxvP+VSAac2HeLPvdrCDeJCckfkHeTg9E3rt2PcAz0REKDCm34lpsedgM4QrVh8D54NgqLCdpT+QpidEBwE1T5wGMId4OwBB+r1VJZyn+lstJreQ0mu67qn3TFKu5AxZoTdDj6BSDqqHEos5KirS4pz3zt3r5IbC3mv8vDm9+o6O5M2f7R6RRNfD9IPJANmO0k2Ajf529I0bGgAGgIpIXb8OaI6G+L48dR john@Johns-MacBook-Pro.local"
          user-script : "/usr/sbin/mdata-get root_authorized_keys > ~root/.ssh/authorized_keys"
    
    - name: Create Plex Zone
      vmadm:
        state: present
        brand: lx
        kernel_version: 4.2
        alias: plex
        image_uuid: 7b5981c4-1889-11e7-b4c5-3f3bdfc9b88b
        max_physical_memory: 2048
        cpu_cap: 100
        nics:
          - nic_tag: external
            ip: "{{ hostvars['plex.zone']['ansible_host'] }}"
            netmask: 255.255.0.0
            gateway: 10.0.0.1
            primary: true
        resolvers:
          - 10.0.0.1
          - 8.8.8.8
          - 8.8.4.4
        quota: 30
        customer_metadata:
          root_authorized_keys: "ssh-rsa AAAAB3NzaC1yc2EAAAADAQABAAABAQDYIHv3DoXnAMn+dggUup1a+jjSqpZiIU5ThgljXHG9KM+iy1W3zo9qshUE7vBj/l7l5aHzRKyXsmWb6EdmtlVBnYl7SH5IMGaEFlB6n7T+yoMRl7VczZZxvP+VSAac2HeLPvdrCDeJCckfkHeTg9E3rt2PcAz0REKDCm34lpsedgM4QrVh8D54NgqLCdpT+QpidEBwE1T5wGMId4OwBB+r1VJZyn+lstJreQ0mu67qn3TFKu5AxZoTdDj6BSDqqHEos5KirS4pz3zt3r5IbC3mv8vDm9+o6O5M2f7R6RRNfD9IPJANmO0k2Ajf529I0bGgAGgIpIXb8OaI6G+L48dR john@Johns-MacBook-Pro.local"
          user-script : "/usr/sbin/mdata-get root_authorized_keys > ~root/.ssh/authorized_keys"

    - name: Remove unused images
      imgadm: uuid=* state=vacuumed

###### Zones ######

## sambadc.zone
- hosts: samba_domain_controllers
  vars:
    samba_server_role: 'active directory domain controller'  #defines server role...(standalone server or active directory domain controller)
    samba_create_domain_controller: true
    enable_dhcp_services: false
    samba_create_domain_users: true  #defines if users defined in samba_domain_users list should be created
    samba_ad_info: { kerberos_realm: "{{ kerberos_realm }}", netbios_domain_name: "{{ domain_name }}", ad_dc_hostname: "dc1", dns_forwarder: 10.0.0.1, adminpass: Iwboj15! }
  roles:
    - role: ansible-isc-dhcp
      when: enable_dhcp_services is defined and enable_dhcp_services
    - role: ansible-ntp
    - role: ansible-samba
  pre_tasks:
    - name: Update APT Cache
      apt:
        update_cache: yes
        cache_valid_time: 3600
  tasks:
    # Create Unix users that match the Samba Users
    - user:
        name: "{{ item.name }}"
        uid: "{{ item.uid }}"
        state: present
      with_items: "{{ samba_domain_users }}"

## plex.zone
- hosts: plex_media_servers
  roles:
    - plexmediaserver

## nas.zone
- hosts: storage_servers
  roles:
    - cifs_server
  tasks:
    # Create groups
    - group:
        name: "{{ item.name }}"
        state: present
        gid: "{{ item.gid }}"
      with_items: "{{ host_groups_present }}"
    
    # Remove groups
    - group:
        name: "{{ item.name }}"
        state: absent
      with_items: "{{ host_groups_absent }}"

    # Create users
    - user:
        name: "{{ item.name }}"
        uid: "{{ item.uid }}"
        groups: "{{ item.groups }}"
        password: "{{ item.password }}"
        state: present
      with_items: "{{ host_users_present }}"

    # Create ZFS filesystems
    - name: Creating ZFS filesystems.
      zfs:
        name: "{{ item.name }}"
        state: present
#        casesensitivity: "{{ item.casesensitivity }}"
        quota: "{{ item.quota }}"
        mountpoint: "{{ item.mountpoint }}"
      with_items: "{{ zfs_filesystems_present }}"
    - name: Set Directory Properties
      file:
        path: "{{ item.mountpoint }}"
        state: directory
        mode: 0777
      with_items: "{{ zfs_filesystems_present }}"

    # Create SMB Shares
    - name: Creating SMB shares.
      shell: 'sharemgr show | grep "{{ item.path }}" || { sharemgr add-share -r "{{ item.name }}" -s "{{ item.path }}" smb && echo "Share Added"; }'
      register: sharemgr_output
      changed_when: '"Share Added" in sharemgr_output.stdout'
      with_items: "{{ smb_shares_present }}"